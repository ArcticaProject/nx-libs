#line 2 "Gen_glslang.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/krh/git/sync/mesa-cvs-repo/Mesa/src/mesa/shader/slang/MachineIndependent/Gen_glslang.cpp,v 1.3 2005/03/18 14:30:27 michal Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
static yyconst short int yy_accept[428] =
    {   0,
        0,    0,    0,    0,  145,  143,  142,  142,  127,  133,
      138,  122,  123,  131,  130,  119,  128,  126,  132,  143,
      143,  120,  116,  134,  121,  135,  139,  143,  124,  125,
      137,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  117,  136,  118,  129,  141,  144,  143,  143,  113,
       99,  118,  107,  102,   97,  105,   95,  106,   96,    0,
       94,    0,   98,   90,    0,    0,    0,  125,  117,  124,
      114,  110,  112,  111,  115,   86,  103,  109,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    8,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   11,   13,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  104,  108,  140,
       93,    0,    1,   92,    0,    0,   88,   89,    0,  100,
      101,    0,    0,   43,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    9,    0,    0,    0,    0,    0,    0,    0,   17,
        0,    0,    0,    0,    0,   14,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   87,   86,    0,   19,    0,    0,
       83,    0,    0,    0,    0,    0,    0,    0,   12,   46,
        0,    0,    0,    0,    0,   51,   65,    0,    0,    0,
        0,    0,    0,   62,   24,   25,   26,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       49,   20,    0,    0,    0,    0,    0,    0,   27,   28,
       29,   18,    0,    0,  140,    0,    0,   92,    0,    0,
        0,    0,    6,   33,   34,   35,   44,    3,    0,    0,
        0,    0,   76,   77,   78,    0,   21,   66,   16,   73,

       74,   75,   70,   71,   72,    0,   15,   68,    0,   30,
       31,   32,    0,    0,    0,    0,    0,    0,    0,   63,
        0,    0,    0,    0,    0,    0,    0,   45,    0,   85,
        0,    0,   10,    0,    0,   91,    0,    0,    0,    0,
       64,   59,   54,    0,    0,    0,   69,   50,   57,   23,
        0,   82,   58,   42,   52,    0,    0,    0,    0,    0,
        0,   93,   92,    0,    0,   53,   22,    0,    0,    0,
        0,    0,    0,   47,    4,    0,    5,    0,    0,    7,
       60,    0,    0,   55,    0,    0,    0,    0,   48,   67,
       56,    2,   61,   84,   36,   37,   38,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   39,    0,    0,
        0,    0,    0,   79,    0,   80,    0,    0,    0,   40,
        0,   41,    0,    0,    0,   81,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   29,   30,   31,   32,   29,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   34,   35,   33,   33,   33,   33,   36,   33,   33,
       37,    1,   38,   39,   33,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   33,   49,   50,   51,   52,
       53,   54,   33,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    1,    1,    1,    1,    1,    1,    2,    2,
        2,    2,    3,    3,    3,    3,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[432] =
    {   0,
        0,    0,   67,    0,  678,  679,  679,  679,  651,  109,
      130,  679,  679,  650,  127,  679,  126,  124,  139,  151,
      671,  647,  679,  151,  647,  121,  679,  668,  679,  679,
      124,  147,  154,  155,  158,  171,  174,  157,  156,  184,
      175,  160,  178,  162,  176,  181,  190,  197,  193,  195,
      179,  679,  193,  679,  679,  679,  679,  656,  666,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  665,
      679,  665,  679,  246,  663,  662,    0,  679,  679,  679,
      639,  679,  679,  679,  638,  253,  679,  679,  612,  605,
      608,  616,  615,  602,  617,  604,  610,  598,  595,  608,

      595,  592,  592,  598,  586,  593,  590,  600,  586,  592,
      597,  679,  136,  596,  587,  581,  586,  588,  578,  592,
      592,  575,  580,  577,  566,  200,  580,  576,  578,  567,
      570,  136,  575,  567,  579,  203,  572,  679,  679,  263,
      275,  616,  679,  282,  614,  311,  318,  325,  613,  679,
      679,  612,  611,  679,  559,  563,  572,  569,  553,  553,
      200,  568,  565,  565,  563,  560,  552,  558,  545,  556,
      559,  679,  556,  544,  551,  553,  546,  535,  534,  547,
      548,  543,  268,  544,  535,  532,  536,  534,  525,  528,
      526,  536,  522,  520,  520,  522,  519,  530,  529,  201,

      524,  519,  508,  290,  526,  528,  517,  562,  561,  337,
      560,  349,  356,  559,    0,  363,  514,  679,  512,  293,
      679,  504,  502,  510,  499,  516,  505,  297,  679,  679,
      499,  509,  509,  494,  368,  679,  679,  371,  498,  492,
      491,  492,  374,  679,  679,  679,  679,  490,  495,  486,
      499,  494,  486,  490,  482,  485,  489,  494,  493,  484,
      679,  679,  490,  479,  479,  484,  483,  480,  679,  679,
      679,  679,  470,  482,  379,  386,  521,  393,  400,  520,
      422,  482,  679,  679,  679,  679,  679,  679,  470,  471,
      465,  475,  679,  679,  679,  466,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  473,  679,  679,  471,  679,
      679,  679,  461,  466,  456,  469,  469,  458,  465,  679,
      463,  465,  449,  458,  464,  459,  447,  679,  449,  679,
      448,  451,  679,  429,  448,  679,  440,  439,  439,  452,
      679,  454,  679,  453,  452,  439,  679,  679,  679,  679,
      435,  679,  679,  679,  679,  432,  443,  436,  442,  439,
      434,  679,  679,  426,  438,  679,  679,  431,  438,  437,
      419,  441,  418,  679,  679,  418,  679,  413,  412,  679,
      679,  411,  410,  679,  422,  405,  404,  376,  679,  679,
      679,  679,  679,  679,  397,  242,  397,  389,  382,  384,

      380,  380,  379,  324,  321,  321,  310,  679,  308,  292,
      282,  266,  268,  285,  265,  679,  246,  258,  229,  679,
      221,  679,  199,  145,  131,  679,  679,  471,  179,  473,
      475
    } ;

static yyconst short int yy_def[432] =
    {   0,
      427,    1,  427,    3,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  428,  427,  427,  427,  427,  429,  427,  427,  427,
      427,  427,  427,  427,  427,  430,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  431,
      427,  428,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  429,  430,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  431,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,    0,  427,  427,  427,
      427
    } ;

static yyconst short int yy_nxt[747] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   21,   21,   21,
       21,   21,   22,   23,   24,   25,   26,   27,   28,   28,
       28,   28,   28,   28,   28,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   28,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       28,   28,   28,   52,   53,   54,   55,    6,   56,   57,
       56,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,   58,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,   59,   59,   59,   59,   59,

       59,   59,   59,    6,    6,    6,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
        6,    6,    6,    6,   61,   62,   63,   66,   68,   70,
       70,   70,   70,   70,   70,   70,   84,   85,   71,   87,
       86,   69,   67,   72,   74,   64,   79,   86,   86,   86,
       86,   86,   88,   86,   73,   86,   75,   75,   75,   75,
       75,   75,   76,   80,   86,   81,   82,   86,   86,   86,
      149,   86,   86,  200,   86,  177,   77,   86,  178,  179,
      426,  201,  180,   86,   94,  110,   86,  425,   86,  116,

       86,   97,   89,   90,   95,   98,   91,   96,   92,  109,
       99,   77,   93,  104,  111,  120,  100,  117,  138,  119,
      101,  105,  102,  106,  122,  137,  107,  115,  112,  123,
      118,  103,  108,  121,  134,  113,  124,  125,  135,  193,
      128,  424,  114,  129,  132,  264,  126,  136,  133,  127,
      205,  130,  206,  265,  194,  223,  224,  139,  131,  144,
      423,  145,  145,  145,  145,  145,  145,  145,  152,  152,
      152,  152,  152,  152,  152,  400,  401,  146,  208,  208,
      208,  208,  208,  208,  208,  245,  246,  247,  422,  146,
       70,   70,   70,   70,   70,   70,   70,  211,  211,  211,

      211,  211,  211,  211,  421,  420,  210,  269,  270,  271,
      284,  285,  286,  212,  293,  294,  295,  419,  210,  418,
      417,  213,  416,  213,  415,  212,  214,  214,  214,  214,
      214,  214,  214,   75,   75,   75,   75,   75,   75,   76,
       76,   76,   76,   76,   76,   76,   76,  276,  414,  276,
      413,  412,  277,  277,  277,  277,  277,  277,  277,  279,
      411,  279,  410,  409,  280,  280,  280,  280,  280,  280,
      280,  214,  214,  214,  214,  214,  214,  214,  152,  152,
      152,  152,  152,  152,  152,  300,  301,  302,  303,  304,
      305,  310,  311,  312,  208,  208,  208,  208,  208,  208,

      208,  277,  277,  277,  277,  277,  277,  277,  211,  211,
      211,  211,  211,  211,  211,  280,  280,  280,  280,  280,
      280,  280,  408,  407,  212,  336,  406,  405,  404,  403,
      402,  399,  362,  398,  397,  396,  212,  214,  214,  214,
      214,  214,  214,  214,  277,  277,  277,  277,  277,  277,
      277,  363,  395,  394,  393,  392,  391,  385,  386,  387,
      390,  389,  384,  280,  280,  280,  280,  280,  280,  280,
      388,  142,  142,  142,  153,  153,  209,  209,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  361,  360,

      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  309,  308,  307,  306,
      299,  298,  297,  296,  292,  291,  290,  289,  288,  287,
      283,  282,  281,  278,  275,  275,  274,  273,  272,  268,
      267,  266,  263,  262,  261,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  233,

      232,  231,  230,  229,  228,  227,  226,  225,  222,  221,
      220,  219,  218,  217,  216,  216,  215,   74,  143,  207,
      204,  203,  202,  199,  198,  197,  196,  195,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      176,  175,  174,  173,  172,  171,  170,  169,  168,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      156,  155,  154,  151,  150,  148,  147,  143,  141,  140,
       72,   86,   83,   78,   74,   65,   60,  427,    5,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427
    } ;

static yyconst short int yy_chk[747] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   10,   10,   11,   15,   17,   18,
       18,   18,   18,   18,   18,   18,   26,   26,   19,   31,
       32,   17,   15,   19,   20,   11,   24,   33,   34,   39,
       38,   35,   31,   42,   19,   44,   20,   20,   20,   20,
       20,   20,   20,   24,   36,   24,   24,   37,   41,   45,
      429,   43,   51,  132,   46,  113,   20,   40,  113,  113,
      425,  132,  113,   47,   34,   39,   49,  424,   50,   42,

       48,   35,   32,   32,   34,   35,   33,   34,   33,   38,
       35,   20,   33,   37,   39,   45,   35,   43,   53,   44,
       36,   37,   36,   37,   46,   51,   37,   41,   40,   47,
       43,   36,   37,   45,   50,   40,   47,   47,   50,  126,
       48,  423,   40,   48,   49,  200,   47,   50,   49,   47,
      136,   48,  136,  200,  126,  161,  161,   53,   48,   74,
      421,   74,   74,   74,   74,   74,   74,   74,   86,   86,
       86,   86,   86,   86,   86,  396,  396,   74,  140,  140,
      140,  140,  140,  140,  140,  183,  183,  183,  419,   74,
      141,  141,  141,  141,  141,  141,  141,  144,  144,  144,

      144,  144,  144,  144,  418,  417,  141,  204,  204,  204,
      220,  220,  220,  144,  228,  228,  228,  415,  141,  414,
      413,  146,  412,  146,  411,  144,  146,  146,  146,  146,
      146,  146,  146,  147,  147,  147,  147,  147,  147,  147,
      148,  148,  148,  148,  148,  148,  148,  210,  410,  210,
      409,  407,  210,  210,  210,  210,  210,  210,  210,  212,
      406,  212,  405,  404,  212,  212,  212,  212,  212,  212,
      212,  213,  213,  213,  213,  213,  213,  213,  216,  216,
      216,  216,  216,  216,  216,  235,  235,  235,  238,  238,
      238,  243,  243,  243,  275,  275,  275,  275,  275,  275,

      275,  276,  276,  276,  276,  276,  276,  276,  278,  278,
      278,  278,  278,  278,  278,  279,  279,  279,  279,  279,
      279,  279,  403,  402,  278,  281,  401,  400,  399,  398,
      397,  395,  334,  388,  387,  386,  278,  281,  281,  281,
      281,  281,  281,  281,  334,  334,  334,  334,  334,  334,
      334,  335,  385,  383,  382,  379,  378,  372,  372,  372,
      376,  373,  371,  335,  335,  335,  335,  335,  335,  335,
      372,  428,  428,  428,  430,  430,  431,  431,  370,  369,
      368,  365,  364,  361,  360,  359,  358,  357,  356,  351,
      346,  345,  344,  342,  340,  339,  338,  337,  332,  331,

      329,  327,  326,  325,  324,  323,  322,  321,  319,  318,
      317,  316,  315,  314,  313,  309,  306,  296,  292,  291,
      290,  289,  282,  280,  277,  274,  273,  268,  267,  266,
      265,  264,  263,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  242,  241,  240,  239,
      234,  233,  232,  231,  227,  226,  225,  224,  223,  222,
      219,  217,  214,  211,  209,  208,  207,  206,  205,  203,
      202,  201,  199,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  173,  171,  170,

      169,  168,  167,  166,  165,  164,  163,  162,  160,  159,
      158,  157,  156,  155,  153,  152,  149,  145,  142,  137,
      135,  134,  133,  131,  130,  129,  128,  127,  125,  124,
      123,  122,  121,  120,  119,  118,  117,  116,  115,  114,
      111,  110,  109,  108,  107,  106,  105,  104,  103,  102,
      101,  100,   99,   98,   97,   96,   95,   94,   93,   92,
       91,   90,   89,   85,   81,   76,   75,   72,   70,   59,
       58,   28,   25,   22,   21,   14,    9,    5,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "glslang.l"
#define INITIAL 0
/*
//
//Copyright (C) 2002-2005  3Dlabs Inc. Ltd.
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without
//modification, are permitted provided that the following conditions
//are met:
//
//    Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//    Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials provided
//    with the distribution.
//
//    Neither the name of 3Dlabs Inc. Ltd. nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
//FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
//COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
//ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//POSSIBILITY OF SUCH DAMAGE.
//
*/
/* Based on
ANSI C grammar, Lex specification

In 1985, Jeff Lee published this Lex specification together with a Yacc 
grammar for the April 30, 1985 ANSI C draft.  Tom Stockfisch reposted 
both to net.sources in 1987; that original, as mentioned in the answer 
to question 17.25 of the comp.lang.c FAQ, can be ftp'ed from ftp.uu.net, 
file usenet/net.sources/ansi.c.grammar.Z. 

I intend to keep this version as close to the current C Standard grammar 
as possible; please let me know if you discover discrepancies. 

Jutta Degener, 1995 
*/
#define YY_NO_UNPUT 1
#line 59 "glslang.l"
#include <stdio.h>
#include <stdlib.h>
#include "ParseHelper.h"
#include "glslang_tab.h"

/* windows only pragma */
#ifdef _MSC_VER
#pragma warning(disable : 4102)
#endif

int yy_input(char* buf, int max_size);
TSourceLoc yylineno;

#ifdef _WIN32
    extern int yyparse(TParseContext&);
    #define YY_DECL int yylex(YYSTYPE* pyylval, TParseContext& parseContext)    
#else
    extern int yyparse(void*);
    #define YY_DECL int yylex(YYSTYPE* pyylval, void* parseContextLocal)
    #define parseContext (*((TParseContext*)(parseContextLocal)))
#endif
 
#define YY_INPUT(buf,result,max_size) (result = yy_input(buf, max_size))

#define YY_NEVER_INTERACTIVE 1
#define FIELDS 1

#line 753 "Gen_glslang.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 91 "glslang.l"

#line 906 "Gen_glslang.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 428 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 679 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 92 "glslang.l"
{ /* ?? carriage and/or line-feed? */ };
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 94 "glslang.l"
{  pyylval->lex.line = yylineno; return(ATTRIBUTE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 95 "glslang.l"
{  pyylval->lex.line = yylineno; return(CONST_QUAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 96 "glslang.l"
{  pyylval->lex.line = yylineno; return(UNIFORM); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "glslang.l"
{  pyylval->lex.line = yylineno; return(VARYING); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 99 "glslang.l"
{  pyylval->lex.line = yylineno; return(BREAK); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 100 "glslang.l"
{  pyylval->lex.line = yylineno; return(CONTINUE); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 101 "glslang.l"
{  pyylval->lex.line = yylineno; return(DO); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 102 "glslang.l"
{  pyylval->lex.line = yylineno; return(FOR); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "glslang.l"
{  pyylval->lex.line = yylineno; return(WHILE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 105 "glslang.l"
{  pyylval->lex.line = yylineno; return(IF); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 106 "glslang.l"
{  pyylval->lex.line = yylineno; return(ELSE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 108 "glslang.l"
{  pyylval->lex.line = yylineno; return(IN_QUAL); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 109 "glslang.l"
{  pyylval->lex.line = yylineno; return(OUT_QUAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "glslang.l"
{  pyylval->lex.line = yylineno; return(INOUT_QUAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 112 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(FLOAT_TYPE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 113 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(INT_TYPE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 114 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(VOID_TYPE); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 115 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(BOOL_TYPE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 116 "glslang.l"
{  pyylval->lex.line = yylineno; pyylval->lex.b = true;  return(BOOLCONSTANT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 117 "glslang.l"
{  pyylval->lex.line = yylineno; pyylval->lex.b = false; return(BOOLCONSTANT); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 119 "glslang.l"
{  pyylval->lex.line = yylineno; return(DISCARD); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 120 "glslang.l"
{  pyylval->lex.line = yylineno; return(RETURN); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(MATRIX2); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(MATRIX3); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 124 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return(MATRIX4); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (VEC2); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (VEC3); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (VEC4); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (IVEC2); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (IVEC3); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (IVEC4); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (BVEC2); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (BVEC3); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return (BVEC4); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 136 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER1D; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 137 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER2D; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 138 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER3D; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 139 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLERCUBE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 140 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER1DSHADOW; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 141 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = true; return SAMPLER2DSHADOW; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 143 "glslang.l"
{  pyylval->lex.line = yylineno; return(STRUCT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 145 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 147 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 148 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 149 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 150 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 151 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 152 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 153 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 155 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 156 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 157 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 159 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 160 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 161 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 162 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 163 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 164 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 165 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 166 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 168 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 169 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 170 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 171 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 172 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 173 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 176 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 178 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 179 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 180 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 181 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 182 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 183 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 184 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 185 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 186 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 188 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 189 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 190 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 192 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 193 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 195 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 196 "glslang.l"
{  PaReservedWord(); return 0; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 198 "glslang.l"
{  
   pyylval->lex.line = yylineno; 
   pyylval->lex.string = NewPoolTString(yytext); 
   return PaIdentOrType(*pyylval->lex.string, parseContext, pyylval->lex.symbol); 
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 204 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 205 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 206 "glslang.l"
{ pyylval->lex.line = yylineno; parseContext.error(yylineno, "Invalid Octal number.", yytext, "", ""); parseContext.recover(); return 0;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 207 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.i = strtol(yytext, 0, 0); return(INTCONSTANT); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 209 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 210 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 211 "glslang.l"
{ pyylval->lex.line = yylineno; pyylval->lex.f = static_cast<float>(atof(yytext)); return(FLOATCONSTANT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 213 "glslang.l"
{  int ret = PaParseComment(pyylval->lex.line, parseContext); if (!ret) return ret; }   
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 215 "glslang.l"
{  pyylval->lex.line = yylineno; return(ADD_ASSIGN); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 216 "glslang.l"
{  pyylval->lex.line = yylineno; return(SUB_ASSIGN); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 217 "glslang.l"
{  pyylval->lex.line = yylineno; return(MUL_ASSIGN); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 218 "glslang.l"
{  pyylval->lex.line = yylineno; return(DIV_ASSIGN); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 219 "glslang.l"
{  pyylval->lex.line = yylineno; return(MOD_ASSIGN); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 220 "glslang.l"
{  pyylval->lex.line = yylineno; return(LEFT_ASSIGN); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 221 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_ASSIGN); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 222 "glslang.l"
{  pyylval->lex.line = yylineno; return(AND_ASSIGN); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 223 "glslang.l"
{  pyylval->lex.line = yylineno; return(XOR_ASSIGN); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 224 "glslang.l"
{  pyylval->lex.line = yylineno; return(OR_ASSIGN); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 226 "glslang.l"
{  pyylval->lex.line = yylineno; return(INC_OP); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 227 "glslang.l"
{  pyylval->lex.line = yylineno; return(DEC_OP); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 228 "glslang.l"
{  pyylval->lex.line = yylineno; return(AND_OP); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 229 "glslang.l"
{  pyylval->lex.line = yylineno; return(OR_OP); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 230 "glslang.l"
{  pyylval->lex.line = yylineno; return(XOR_OP); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 231 "glslang.l"
{  pyylval->lex.line = yylineno; return(LE_OP); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 232 "glslang.l"
{  pyylval->lex.line = yylineno; return(GE_OP); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 233 "glslang.l"
{  pyylval->lex.line = yylineno; return(EQ_OP); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 234 "glslang.l"
{  pyylval->lex.line = yylineno; return(NE_OP); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 235 "glslang.l"
{  pyylval->lex.line = yylineno; return(LEFT_OP); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 236 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_OP); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 237 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = false; return(SEMICOLON); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 238 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = false; return(LEFT_BRACE); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 239 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_BRACE); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 240 "glslang.l"
{  pyylval->lex.line = yylineno; if (parseContext.inTypeParen) parseContext.lexAfterType = false; return(COMMA); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 241 "glslang.l"
{  pyylval->lex.line = yylineno; return(COLON); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 242 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = false; return(EQUAL); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 243 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.lexAfterType = false; parseContext.inTypeParen = true; return(LEFT_PAREN); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 244 "glslang.l"
{  pyylval->lex.line = yylineno; parseContext.inTypeParen = false; return(RIGHT_PAREN); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 245 "glslang.l"
{  pyylval->lex.line = yylineno; return(LEFT_BRACKET); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 246 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_BRACKET); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 247 "glslang.l"
{ BEGIN(FIELDS);  return(DOT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 248 "glslang.l"
{  pyylval->lex.line = yylineno; return(BANG); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 249 "glslang.l"
{  pyylval->lex.line = yylineno; return(DASH); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 250 "glslang.l"
{  pyylval->lex.line = yylineno; return(TILDE); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 251 "glslang.l"
{  pyylval->lex.line = yylineno; return(PLUS); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 252 "glslang.l"
{  pyylval->lex.line = yylineno; return(STAR); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 253 "glslang.l"
{  pyylval->lex.line = yylineno; return(SLASH); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 254 "glslang.l"
{  pyylval->lex.line = yylineno; return(PERCENT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 255 "glslang.l"
{  pyylval->lex.line = yylineno; return(LEFT_ANGLE); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 256 "glslang.l"
{  pyylval->lex.line = yylineno; return(RIGHT_ANGLE); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 257 "glslang.l"
{  pyylval->lex.line = yylineno; return(VERTICAL_BAR); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 258 "glslang.l"
{  pyylval->lex.line = yylineno; return(CARET); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 259 "glslang.l"
{  pyylval->lex.line = yylineno; return(AMPERSAND); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 260 "glslang.l"
{  pyylval->lex.line = yylineno; return(QUESTION); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 262 "glslang.l"
{ 
BEGIN(INITIAL);      
    pyylval->lex.line = yylineno;     
    pyylval->lex.string = NewPoolTString(yytext); 
    return FIELD_SELECTION; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 267 "glslang.l"
{}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 269 "glslang.l"
{  }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FIELDS):
#line 270 "glslang.l"
{ (&parseContext)->AfterEOF = true; yy_delete_buffer(YY_CURRENT_BUFFER); yyterminate();}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 271 "glslang.l"
{ parseContext.infoSink.info << "FLEX: Unknown char " << yytext << "\n";
          return 0; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 274 "glslang.l"
ECHO;
	YY_BREAK
#line 1723 "Gen_glslang.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 428 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 428 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 427);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 274 "glslang.l"



//Including Pre-processor.
extern "C" {
  #include "./preprocessor/preprocess.h"
} 

//
// The YY_INPUT macro just calls this.  Maybe this could be just put into
// the macro directly.
//

int yy_input(char* buf, int max_size)
{
     char *char_token =NULL;
     int len;

    if ((len = yylex_CPP(buf, max_size)) == 0)
        return 0;
    if (len >= max_size) 
        YY_FATAL_ERROR( "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

 	buf[len] = ' ';
	return len+1;
}


//
// Parse an array of strings using yyparse.  We set up globals used by
// yywrap.
//
// Returns 0 for success, as per yyparse().
//
int PaParseStrings(char* argv[], int strLen[], int argc, TParseContext& parseContextLocal)
{
    int argv0len;
    ScanFromString(argv[0]); 
    
    //Storing the Current Compiler Parse context into the cpp structure.
	cpp->pC = (void*)&parseContextLocal;
	
	if (!argv || argc == 0 || !argv[0])
        return 1;
    
    if (!strLen) {
        argv0len = (int) strlen(argv[0]);
        strLen   = &argv0len;
    }
    yyrestart(0);
    (&parseContextLocal)->AfterEOF = false;
    cpp->PaWhichStr = 0;
    cpp->PaArgv     = argv;
    cpp->PaArgc     = argc;
    cpp->PaStrLen   = strLen;
    yylineno   = 1;
   
    if (*cpp->PaStrLen >= 0) {    
        int ret;
        #ifdef _WIN32
            ret = yyparse(parseContextLocal);
        #else
            ret = yyparse((void*)(&parseContextLocal));
        #endif
        if (cpp->CompileError == 1 || parseContextLocal.recoveredFromError || parseContextLocal.numErrors > 0)
             return 1;
        else
             return 0;
    }
    else
        return 0;
}

void yyerror(char *s) 
{
    if (((TParseContext *)cpp->pC)->AfterEOF) {
        if (cpp->tokensBeforeEOF == 1) {
            GlobalParseContext->error(yylineno, "syntax error", "pre-mature EOF", s, "");
            GlobalParseContext->recover();
        }
    } else {
        GlobalParseContext->error(yylineno, "syntax error", yytext, s, "");
        GlobalParseContext->recover();
    }            
}

void PaReservedWord()
{
    GlobalParseContext->error(yylineno, "Reserved word.", yytext, "", "");
    GlobalParseContext->recover();
}

int PaIdentOrType(TString& id, TParseContext& parseContextLocal, TSymbol*& symbol)
{
    symbol = parseContextLocal.symbolTable.find(id);
    if (parseContextLocal.lexAfterType == false && symbol && symbol->isVariable()) {
        TVariable* variable = static_cast<TVariable*>(symbol);
        if (variable->isUserType()) {
            parseContextLocal.lexAfterType = true;
            return TYPE_NAME;
        }
    }
    
    return IDENTIFIER;
}

int PaParseComment(int &lineno, TParseContext& parseContextLocal)
{
    int transitionFlag = 0;
    int nextChar;
    
    while (transitionFlag != 2) {
        nextChar = yyinput();
        if (nextChar == '\n')
             lineno++;
        switch (nextChar) {
        case '*' :
            transitionFlag = 1;
            break;
        case '/' :  /* if star is the previous character, then it is the end of comment */
            if (transitionFlag == 1) {
                return 1 ;
            }
            break;
        case EOF :
            /* Raise error message here */
            parseContextLocal.error(yylineno, "End of shader found before end of comment.", "", "", "");
            GlobalParseContext->recover();
            return YY_NULL; 
        default :  /* Any other character will be a part of the comment */
            transitionFlag = 0;
        }
    }
    return 1;
}

extern "C" {

void CPPDebugLogMsg(const char *msg)
{
    ((TParseContext *)cpp->pC)->infoSink.debug.message(EPrefixNone, msg);
}

void CPPWarningToInfoLog(const char *msg)
{
    ((TParseContext *)cpp->pC)->infoSink.info.message(EPrefixWarning, msg, yylineno); 
}

void CPPShInfoLogMsg(const char *msg)
{
    ((TParseContext *)cpp->pC)->error(yylineno,"", "",msg,"");
    GlobalParseContext->recover();
}

void CPPErrorToInfoLog(char *msg)
{
    ((TParseContext *)cpp->pC)->error(yylineno,"syntax error", "",msg,"");
    GlobalParseContext->recover();
}

void SetLineNumber(int line)
{
    yylineno &= ~SourceLocLineMask;
    yylineno |= line;
}

void SetStringNumber(int string)
{
    yylineno = (string << SourceLocStringShift) | (yylineno & SourceLocLineMask);
}

int GetStringNumber(void)
{
    return yylineno >> 16;
}

int GetLineNumber(void)
{
    return yylineno & SourceLocLineMask;
}

void IncLineNumber(void)
{
    if ((yylineno & SourceLocLineMask) <= SourceLocLineMask)
        ++yylineno;
}

void DecLineNumber(void)
{
    if ((yylineno & SourceLocLineMask) > 0)
        --yylineno;
}

void HandlePragma(const char **tokens, int numTokens)
{
    if (!strcmp(tokens[0], "optimize")) {
        if (numTokens != 4) {
            CPPShInfoLogMsg("optimize pragma syntax is incorrect");
            return;
        }
        
        if (strcmp(tokens[1], "(")) {
            CPPShInfoLogMsg("\"(\" expected after 'optimize' keyword");
            return;
        }
            
        if (!strcmp(tokens[2], "on"))
            ((TParseContext *)cpp->pC)->contextPragma.optimize = true;
        else if (!strcmp(tokens[2], "off"))
            ((TParseContext *)cpp->pC)->contextPragma.optimize = false;
        else {
            CPPShInfoLogMsg("\"on\" or \"off\" expected after '(' for 'optimize' pragma");
            return;
        }
        
        if (strcmp(tokens[3], ")")) {
            CPPShInfoLogMsg("\")\" expected to end 'optimize' pragma");
            return;
        }
    } else if (!strcmp(tokens[0], "debug")) {
        if (numTokens != 4) {
            CPPShInfoLogMsg("debug pragma syntax is incorrect");
            return;
        }
        
        if (strcmp(tokens[1], "(")) {
            CPPShInfoLogMsg("\"(\" expected after 'debug' keyword");
            return;
        }
            
        if (!strcmp(tokens[2], "on"))
            ((TParseContext *)cpp->pC)->contextPragma.debug = true;
        else if (!strcmp(tokens[2], "off"))
            ((TParseContext *)cpp->pC)->contextPragma.debug = false;
        else {
            CPPShInfoLogMsg("\"on\" or \"off\" expected after '(' for 'debug' pragma");
            return;
        }
        
        if (strcmp(tokens[3], ")")) {
            CPPShInfoLogMsg("\")\" expected to end 'debug' pragma");
            return;
        }
    } else {
        /*
        // implementation specific pragma
        // use ((TParseContext *)cpp->pC)->contextPragma.pragmaTable to store the information about pragma
        // For now, just ignore the pragma that the implementation cannot recognize
        // An Example of one such implementation for a pragma that has a syntax like
        // #pragma pragmaname(pragmavalue)
        // This implementation stores the current pragmavalue against the pragma name in pragmaTable.
        if (numTokens == 4 && !strcmp(tokens[1], "(") && !strcmp(tokens[3], ")")) {              
            TPragmaTable& pragmaTable = ((TParseContext *)cpp->pC)->contextPragma.pragmaTable;
            TPragmaTable::iterator iter;
            iter = pragmaTable.find(TString(tokens[0]));
            if (iter != pragmaTable.end()) {
                iter->second = tokens[2];
            } else {
                pragmaTable[tokens[0]] = tokens[2];
            }        
        }
        */
    }
}

void StoreStr(char *string)
{
    TString strSrc;
    strSrc = TString(string);

    ((TParseContext *)cpp->pC)->HashErrMsg = ((TParseContext *)cpp->pC)->HashErrMsg + " " + strSrc;
}

const char* GetStrfromTStr(void)
{
    cpp->ErrMsg = (((TParseContext *)cpp->pC)->HashErrMsg).c_str();
    return cpp->ErrMsg;
}

void ResetTString(void)
{
    ((TParseContext *)cpp->pC)->HashErrMsg = "";
}

TBehavior GetBehavior(const char* behavior)
{
    if (!strcmp("require", behavior))
        return EBhRequire;
    else if (!strcmp("enable", behavior))
        return EBhEnable;
    else if (!strcmp("disable", behavior))
        return EBhDisable;
    else if (!strcmp("warn", behavior))
        return EBhWarn;
    else {
        CPPShInfoLogMsg((TString("behavior '") + behavior + "' is not supported").c_str());
        return EBhDisable;
    }        
}

void  updateExtensionBehavior(const char* extName, const char* behavior)
{
    TBehavior behaviorVal = GetBehavior(behavior);
    TMap<TString, TBehavior>:: iterator iter;
    TString msg;
    
    // special cased for all extension
    if (!strcmp(extName, "all")) {
        if (behaviorVal == EBhRequire || behaviorVal == EBhEnable) {
            CPPShInfoLogMsg("extension 'all' cannot have 'require' or 'enable' behavior");  
            return;
        } else {
            for (iter =  ((TParseContext *)cpp->pC)->extensionBehavior.begin(); iter != ((TParseContext *)cpp->pC)->extensionBehavior.end(); ++iter)
                iter->second = behaviorVal;
        }        
    } else {
        iter = ((TParseContext *)cpp->pC)->extensionBehavior.find(TString(extName));
        if (iter == ((TParseContext *)cpp->pC)->extensionBehavior.end()) {
            switch (behaviorVal) {
            case EBhRequire:
                CPPShInfoLogMsg((TString("extension '") + extName + "' is not supported").c_str());  
                break;
            case EBhEnable:
            case EBhWarn:
            case EBhDisable:
                msg = TString("extension '") + extName + "' is not supported";
                ((TParseContext *)cpp->pC)->infoSink.info.message(EPrefixWarning, msg.c_str(), yylineno); 
                break;
            }
            return;
        } else
            iter->second = behaviorVal;
    }
}
        
}

void setInitialState()
{
    yy_start = 1;
}
